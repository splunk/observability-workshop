name: Deploy Workshop

# Controls when the action will run. Triggers manually
on: workflow_dispatch

jobs:
  deploy:
    name: Release new minor version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: recursive # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.92.2'
          extended: true

      - name: Setup yq
        uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: '4.20.2'
          yq-url: 'https://github.com/mikefarah/yq/releases/download/v{version}/yq_{platform}_{arch}'

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache Node dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache go dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/hugo_cache
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: Setup Docsy
        run: npm ci --cache .npm --prefer-offline

      - name: Bumpversion and commit
        id: bumpversion
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git pull --rebase
          FLAVOUR=minor
          TAG=$(bumpversion --list "$FLAVOUR" | awk -F= '/new_version=/ { print $2 }')
          echo "::set-output name=tag_name::${TAG}"

          BASE_URL="$(yq .baseURL config.yaml)"
          echo "::set-output name=base_url::${BASE_URL}"

          awk "/Latest versions of the workshop are:/ { print; print \"- [v${TAG}](https://signalfx.github.io/observability-workshop/v${TAG}/)\";next }1" README.md |
          awk "NR==1,/Latest versions of the workshop are:/{c=3} c&&c-- " > README.new.md
          mv README.new.md README.md
          git fetch --tags origin
          git add README.md

          LATEST_URL=$(yq '.params.versions[]|select(.version == "latest").url' config.yaml)
          # filter versions, remove latest entry, add new version, sort, limit to last two, add latest
          NEW_VERSIONS=$(yq '.params.versions[] | select (.version != "latest") | [ . ]' config.yaml |
            yq -o=json -I=0 '. += [{ "version": "v'"${VER}"'", "url": "'"${BASE_URL}observability-workshop/v${VER}"'"}] | sort_by(.version)' |
            jq -c --arg latest_url "${LATEST_URL}" '.[-2:] | [{ version: "latest", url: $latest_url}] + .')

          # set new versions
          yq e ".params.versions=${NEW_VERSIONS}" -i config.yaml
          git add config.yaml

          git commit --amend -m "Releasing v${TAG}"
          git tag -a "v${TAG}" -m "Version ${TAG}"
          git push --follow-tags origin master || { echo 'Push failed. git pull --rebase from upstream and attempt another release.'; exit 1; }

      - name: Get Submodules
        run: cd themes/docsy && git submodule update -f --init --jobs=6 && cd ../..

      - name: Build Site
        run: |
          hugo --minify --destination site/v${{ steps.bumpversion.outputs.tag_name }} --baseURL ${{ steps.bumpversion.outputs.base_url }}observability-workshop/v${{ steps.bumpversion.outputs.tag_name }}
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: './site/v${{ steps.bumpversion.outputs.tag_name }}'
          destination_dir: 'v${{ steps.bumpversion.outputs.tag_name }}'
          commit_message: 'Docs: Releasing ${{ steps.bumpversion.outputs.tag_name }}'
