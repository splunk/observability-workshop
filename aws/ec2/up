#!/usr/bin/env bash

set -Eeuo pipefail

STATUS_LOG=/run/cloud-init/status.json

if [[ "$#" -ne 3 ]]; then
	echo "Usage: up SLUG COUNT REGION"
	echo "  SLUG   Short name/tag, e.g. acme. Used to derive project name, aws tags and terraform workspace."
	echo "  COUNT  Amount of instances, e.g. 12."
	echo "  REGION AWS region for instances, e.g. eu-central-1."
	exit 1
fi

COMMANDS="jq terraform pssh"

for cmd in $COMMANDS; do
	if ! command -v "$cmd" &> /dev/null; then
		echo "$cmd not found. Please install with your package manager, e.g. brew install $cmd."
		exit 1
	fi
done

SLUG=$1
COUNT=$2
REGION=$3

terraform workspace select "o11y-for-$SLUG" || terraform workspace new "o11y-for-$SLUG"
terraform plan -var="slug=$SLUG" -var="aws_instance_count=$COUNT" -var="aws_region=$REGION" -input=false -out=tfplan
while :; do
	terraform apply -input=false tfplan
	# terraform apply -var="aws_instance_count=$COUNT" -var="aws_region=$REGION" -input=false

	sanity_check_tmp=$(mktemp -d)
	pssh -o "${sanity_check_tmp}" --par 60 -l ubuntu -A --hosts <(terraform output --json ip|jq -r '.[]') -x "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=password -o PubkeyAuthentication=no" -- "cat ${STATUS_LOG}"

	ERR_COUNT=$(jq ' .v1 | .[] | values | select(.errors? | length > 0) | .errors[] ' "${sanity_check_tmp}"/* | jq -rs '. | length')

	if [[ $ERR_COUNT -eq 0 ]]; then
		echo "All instances completed cloud-init without errors."
		break;
	else
		echo "Errors found in cloud-init status for some instances."
		jq -r '.v1 | .[] | values | select(.errors? | length > 0) | input_filename' "${sanity_check_tmp}"/* |
			sed -e 's,sanity-check/,,' |
			{ TF_STATE=$(terraform show --json); while read -r IP; do \
				RNAME=$(jq -r ' .values.root_module.resources[] | select (.values.public_ip == "'"$IP"'") | .address' <<< "$TF_STATE")
				echo "Error found in cloud-init status for instance: $RNAME"
				terraform destroy -var="aws_instance_count=$COUNT" -var="aws_region=$REGION" -target "'$RNAME'"
			done }
	fi
done
