---
- hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: Set the required variables
      set_fact:
        ingest_token: "{{ lookup('env','ACCESS_TOKEN') }}"
        rum_token: "i{{ lookup('env','RUM_TOKEN') }}"
        realm: "{{ lookup('env','REALM') }}"
        o11y_env_name: "{{ lookup('env','INSTANCE') }}"
        o11y_diabversion: "demo-in-a-box-2.0"

  tasks:
    - name: Configure Demo-in-a-Box
      block:
      - name: Check to see if the config has run
        stat:
          path: /white_rabbit.followed
        register: wh_result

      - name: Download demo-in-a-box
        get_url:
          url: "https://demoinabox-tst.s3.us-east-2.amazonaws.com/{{ o11y_diabversion }}.zip"
          dest: /home/ubuntu/demo-in-a-box.zip
        become: true
        when: not wh_result.stat.exists

      - name: Extract demo-in-a-box into /home/ubuntu/
        unarchive:
          src: demo-in-a-box.zip
          dest: /home/ubuntu/
          owner: ubuntu
          group: ubuntu
          remote_src: yes
          list_files: yes
        become: true
        register: diab_dir_name
        when: not wh_result.stat.exists

      - name: Delete demo-in-a-box.zip
        file:
          path: /home/ubuntu/demo-in-a-box.zip
          state: absent
        become: true
        when: not wh_result.stat.exists
        
      - debug:
          var: diab_dir_name.files[0]
        when: not wh_result.stat.exists

      - name: Create service for Demo-in-a-Box
        file:
          path: /etc/systemd/system/demoinabox.service
          state: touch
        become: true
        when: not wh_result.stat.exists

      - name: Update service for demoinabox.service
        ansible.builtin.blockinfile:
          path: /etc/systemd/system/demoinabox.service
          block: |
            [Unit]
            Description=demoinabox service
            After=network.target
            StartLimitIntervalSec=0
            [Service]
            Type=simple
            Restart=always
            RestartSec=1
            User=ubuntu
            Environment="KUBECONFIG=/home/ubuntu/.kube/config"
            WorkingDirectory=/home/ubuntu/{{ diab_dir_name.files[0] }}democonsole
            ExecStart=/usr/bin/flask run -p 8081 --host=0.0.0.0
            [Install]
            WantedBy=multi-user.target
          marker: "## {mark} added by ansible (configuration demo-in-a-box)"
        become: true
        when: not wh_result.stat.exists

      - name: Install democonsole Python dependencies
        command: python3 -m pip install -r requirements.txt
        args:
          chdir: "/home/ubuntu/{{ diab_dir_name.files[0] }}democonsole/"
        when: not wh_result.stat.exists

      - name: Helm OTel Collector repository add
        command: helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart
        when: not wh_result.stat.exists

      - name: Helm repository update
        command: helm repo update
        when: not wh_result.stat.exists

      - name: Start the demoinabox service
        command: systemctl enable --now demoinabox.service
        become: true
        when: not wh_result.stat.exists

      - name: Wait for demoinabox.service to start
        pause:
          seconds: 15
        when: not wh_result.stat.exists

      - name: Save Demo-in-a-Box configuration
        uri:
          url: "http://localhost:8081/saveConfig"
          method: POST
          body: "realm={{ realm }}&accessToken={{ ingest_token }}&rumAccessToken={{ rum_token }}&environment={{ o11y_env_name }}&loadgenLocation=aws"
          status_code: [ 200, 201 ]
          timeout: 30
        when: not wh_result.stat.exists

      - name: Start the OpenTelemetry Collector
        uri:
          url: "http://localhost:8081/startCollector"
          method: GET
          status_code: [ 200, 201 ]
          timeout: 30
        when: not wh_result.stat.exists

      - name: Wait for OpenTelemetry Collector to start
        pause:
          seconds: 60
        when: not wh_result.stat.exists

      - name: Start the frontend demo
        uri:
          url: "http://localhost:8081/startdemo?demo=frontend"
          method: GET
          status_code: [ 200, 201 ]
          timeout: 30
        when: not wh_result.stat.exists

      - name: Wait for frontend demo to start
        pause:
          seconds: 90
        when: not wh_result.stat.exists

      - name: Wait for the Online Boutique to become available
        uri:
          url: "http://localhost:81"
          method: GET
          validate_certs: no
          status_code: 200
          return_content: no
        register: splunk_ui
        until: splunk_ui.status == 200
        retries: 30
        delay: 5

      - name: Create a file to signify that the config has run successfully
        file:
          path: "/white_rabbit.followed"
          state: touch
        become: true
        when: not wh_result.stat.exists